/*这个程序是AVL树的单选转、双旋转、插入操作的集合，其他函数暂不展示*/
//声明部分
#include<stdio.h>
#include<stdlib.h>
#define ElementType int


#ifndef _AvlTree_H
struct AvlNode;
typedef struct AvlNode *Position;
typedef struct AvlNode *AvlTree;

AvlTree MakeRmpty( AvlTree T);
Position Find( ElementType X,AvlTree T);
Position FindMin( AvlTree T);
Position FindMax( AvlTree T);
AvlTree Insert( ElementType X,AvlTree T);
AvlTree Delete( ElementType X,AvlTree T);
ElementType Retrieve( Position P);
#endif // _AvlTree_H

//必备结构体和快速查找高度的函数
struct AvlNode
{
    ElementType Element;
    AvlTree Left;
    AvlTree Right;
    int Height;
};

static int Height(Position P)
{
    if( P==NULL)
        return -1;
    else
        return P->Height;
}

int main()
{
    return 0;
}
//开始插入函数，和普通二叉查找树插入有不同，加入了height，加入了旋转的函数调用
AvlTree Insert( ElementType X,AvlTree T)
{
    if(T==NULL)
    {
        T = (AvlTree)malloc(struct AvlTree);
        if( T==NULL)
            FatalError("out of space!!");
        else
        {
            T->Element = X;T->Height = 0;
            T->Left = T->Right = NULL;
        }
    }
    else if(X<T->Element)
    {
        T->Left = Insert(X,T->Left);
        if(Height(T->Left) - Height(T->Right)==2)
            if(X<T->Left->Element)
                T = SingleRotateWithLeft( T );
            else
                T = DoubleRotateWithLeft( T );
    }
    else if(X > T->Element )
    {
        T->Right = Insert(X,T->Right);
        if(Height(T->Right) - Height(T->Left)==2)
            if(X<T->Right->Element)
                T = SingleRotateWithRight( T );
            else
                T = DoubleRotateWithRight( T );
    }
    T->Height = Max( Height(T->Left),Height(T->Right)) + 1;
    return T;
}

//接下来是左左，右右型的单旋转
static Position SingleRotateWithLeft(Position K2)
{
    Position K1;

    K1 = K2->Left;
    K2->Left = K1->Right;
    K1->Right = K2;

    K2->Height = Max(Height(K2->Left),Height(K2->Right)) + 1;
    K1->Height = Max(Height(K1->Left),Height(K1->Right)) + 1;
    return K1;
}

static Position SingleRotateWithRight(Position K2)
{
    Position K1;

    K1 = K2->Right;
    K2->Right = K1->Left;
    K1->Left = K2;

    K2->Height = Max(Height(K2->Left),Height(K2->Right)) + 1;
    K1->Height = Max(Height(K1->Left),Height(K1->Right)) + 1;
    return K1;
}

//左右，右左的双旋转，采用对单旋转的调用
static Position DoubleRotateWithLeft( Position K3 )
{
    K3->Left = SingleRotateWithRight(K3->Left);
    return  SingleRotateWithLeft(K3);//你品，你细品
}

static Position DoubleRotateWithRight( Position K3 )
{
    K3->Right = SingleRotateWithLeft(K3->Right);
    return  SingleRotateWithRight(K3);//你品，你细品
}
